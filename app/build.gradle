buildscript {
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.1'
        classpath 'io.fabric.tools:gradle:1.19.1'
        classpath 'com.jakewharton.hugo:hugo-plugin:1.2.1'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

// Hugo
apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.hugo'

repositories {
    maven { url 'https://github.com/donnfelker/mvn-repo/raw/master/' }
    mavenLocal()
    jcenter()
    maven { url 'https://maven.fabric.io/public' }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

android {
    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION

    defaultConfig {
        versionCode 1
        versionName "1.0"

        applicationId "com.connect"
        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)

        proguardFile 'proguard-android.txt'
        //        renderscriptTargetApi Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
        //        renderscriptSupportModeEnabled true
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storePassword 'android'
        }
        // release {
        // storeFile file(System.getenv('ANDROID_KEYSTORE_PATH'))
        // storePassword System.getenv('ANDROID_STORE_PASS')
        // keyAlias System.getenv('ANDROID_KEY_ALIAS')
        // keyPassword System.getenv('ANDROID_KEY_PASS')
        // }
    }

    lintOptions {
        disable 'InvalidPackage'
        checkReleaseBuilds false
        abortOnError false
        lintConfig file("lint.xml")
    }

    buildTypes {
        debug {
            debuggable true
            jniDebuggable true
            minifyEnabled true
            zipAlignEnabled true
//            applicationIdSuffix '.debug'
            testCoverageEnabled = true
        }
        release {
            debuggable false
            jniDebuggable false
            minifyEnabled true
            zipAlignEnabled true
            testCoverageEnabled = false
            // signingConfig signingConfigs.release
            // testPackageName 'com.donnfelker.android.bootstrap.tests'
            // testInstrumentationRunner 'android.test.InstrumentationTestRunner' // this is the default
        }
    }

    sourceSets {
        androidTest {
            setRoot('src/test')
        }
    }

    //!! REMARK !!
    //add this library to work with Robolectric 3.0 when your API level >= 23.
    //the HttpClient has been removed as of API Level 23, but Robolectric is automatically
    //shadowing this class. So add it, even though you're not using it.
//    useLibrary 'org.apache.http.legacy'
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Google Play Services
    //    compile 'com.google.android.gms:play-services-analytics:7.8.0'
    //    compile 'com.google.android.gms:play-services-gcm:7.8.0'
    //    compile 'com.google.android.gms:play-services-location:7.8.0'
    //    compile 'com.google.android.gms:play-services-maps:7.8.0'
    //    compile 'com.google.android.gms:play-services-nearby:7.8.0'
    //    compile 'com.google.android.gms:play-services-plus:7.8.0'

    // Utils - BE CAREFUL WHEN USING - 14,842 method count
    //    compile 'com.google.guava:guava:18.0'

    // Phone Utils
    //    compile 'com.googlecode.libphonenumber:libphonenumber:7.0.9'

    // Sockets
    //    compile 'com.pusher:pusher-java-client:0.3.3'

    // GSON
    compile 'com.google.code.gson:gson:2.3.1'

    // Observables
    compile 'io.reactivex:rxjava:1.0.14'
    compile 'io.reactivex:rxandroid:1.0.1'


    // Dependency Injection
    compile 'com.squareup.dagger:dagger:1.2.2'
    compile 'com.squareup.dagger:dagger-compiler:1.2.2'

    // View Injection
    compile 'com.jakewharton:butterknife:7.0.1'

    // Logging
    compile 'com.jakewharton.timber:timber:3.1.0'

    // Otto
    compile 'com.squareup:otto:1.3.8'

    // Mortar
    compile 'com.squareup.mortar:mortar:0.19'

    // Flow
    compile 'com.squareup.flow:flow:0.9'
    compile 'com.squareup.flow:flow-path:0.9'

    // Image Loading
    compile 'com.squareup.picasso:picasso:2.5.2'

    // HTTP
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.squareup.okhttp:okhttp:2.4.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.4.0'

    // Android Support Libs
    compile 'com.android.support:support-v4:22.2.1'
    compile 'com.android.support:appcompat-v7:22.2.1'
    compile 'com.android.support:support-v13:22.2.1'

    // Fabric/Crashlytics
    compile('com.crashlytics.sdk.android:crashlytics:2.5.1@aar') {
        transitive = true
    }

    // Memory Leaks
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'

    testCompile('junit:junit:4.12') {
        exclude module: 'hamcrest-core'
    }
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.robolectric:robolectric:3.1-SNAPSHOT'
}

// Jacoco - Test Coverage
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.7.1.201405082137"
}

def coverageSourceDirs = [
        '../app/src/main_activity/java'
]

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: '../app/build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('../app/build/jacoco/testDebug.exec')

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }

    onlyIf = {
        true
    }

    doFirst {
        new File('app/build/intermediates/classes/').eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }

        executionData = files(executionData.findAll {
            it.exists()
        })
    }

    afterEvaluate {
        // just clean up coveralls dashboard, following reports are not of interest
        testDebugUnitTest.reports.junitXml.enabled = false
    }
}